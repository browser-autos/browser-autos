# ================================================================================
# Browser.autos - Production Docker Compose Configuration
# ================================================================================
# 企业级浏览器自动化服务完整编排配置
#
# 特色功能:
# - 完整的服务健康检查和自动重启
# - 资源限制防止单个服务占用过多资源
# - 数据持久化和日志管理
# - Prometheus + Grafana 监控栈
# - 安全加固（非 root 用户，资源隔离）
#
# 使用方法:
#   docker-compose -f docker-compose.prod.yml --env-file .env.production up -d
# ================================================================================

version: '3.8'

services:
  # ============================================================================
  # Redis - 任务队列和缓存
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: browser-autos-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - browser-autos-network

  # Browser.autos API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: browser-autos-api
    restart: unless-stopped
    ports:
      - "${PORT:-3001}:3001"
    environment:
      # Service Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      HOST: 0.0.0.0
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # Authentication
      JWT_SECRET: ${JWT_SECRET}
      TOKEN_EXPIRY: ${TOKEN_EXPIRY:-30d}

      # Chrome Configuration
      MAX_CONCURRENT_SESSIONS: ${MAX_CONCURRENT_SESSIONS:-5}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT:-300000}
      MAX_SESSION_DURATION: ${MAX_SESSION_DURATION:-3600000}
      CHROME_EXECUTABLE_PATH: /usr/bin/chromium-browser

      # Browser Pool
      BROWSER_POOL_MIN: ${BROWSER_POOL_MIN:-2}
      BROWSER_POOL_MAX: ${BROWSER_POOL_MAX:-10}
      BROWSER_MAX_AGE: ${BROWSER_MAX_AGE:-3600000}

      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379

      # Queue Configuration
      QUEUE_NAME: ${QUEUE_NAME:-browser-tasks}
      QUEUE_MAX_CONCURRENT: ${QUEUE_MAX_CONCURRENT:-5}
      QUEUE_TIMEOUT: ${QUEUE_TIMEOUT:-120000}
      QUEUE_RETRIES: ${QUEUE_RETRIES:-3}

      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: ${METRICS_PORT:-9090}

      # Resource Limits
      MAX_MEMORY_PER_BROWSER: ${MAX_MEMORY_PER_BROWSER:-512}
      MAX_CPU_PER_BROWSER: ${MAX_CPU_PER_BROWSER:-50}

      # Rate Limiting
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS:-true}
    volumes:
      - /tmp/screenshots:/tmp/screenshots
      - /tmp/pdfs:/tmp/pdfs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '${API_CPU_LIMIT:-2}'
          memory: ${API_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${API_CPU_RESERVATION:-0.5}'
          memory: ${API_MEMORY_RESERVATION:-512M}
    networks:
      - browser-autos-network

  # Prometheus - 监控指标收集
  prometheus:
    image: prom/prometheus:latest
    container_name: browser-autos-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - api
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - browser-autos-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # ============================================================================
  # Grafana - 监控可视化
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: browser-autos-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - browser-autos-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# ==============================================================================
# 网络配置
# ==============================================================================
networks:
  browser-autos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# ==============================================================================
# 数据卷配置
# ==============================================================================
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  browser-autos-network:
    driver: bridge
